extends ../../layouts/slides/stream

block head
    title Frontend Authed Routes with react-router
    link(rel="stylesheet" href="frontend-authed-routes.css")

block slides
    .slide.alt
        h1 Frontend Authed Routes with #[code react-router]
        img(src="https://media.giphy.com/media/IbYGMVhugrOxi/giphy.gif" width="200")
    .slide
        h2 Hi! I'm Ken.
        p I'm a full-stack product engineer.
        p I build #[a(href="https://ken.hoff.tech") dumb fun web stuff] and #[a(href="http://www.rustbucketgarage.tv") work on rusty old cars].
    .slide.alt
        h2 I'm currently a Developer Advocate at #[a(href="https://getstream.io") Stream]! 
        p Stream lets you build #[strong scalable] and #[strong personalized] activity feeds.
    .slide
        p If you'd like to revisit this talk later:
        table
            tr
                td Slides: 
                td #[a(href="https://ken.hoff.tech/slides/frontend-authed-routes") ken.hoff.tech/slides/frontend-authed-routes]
            tr
                td Source code: 
                td #[a(href="https://github.com/kenhoff/frontend-authed-routes") github.com/kenhoff/frontend-authed-routes]
            tr
                td Live demo:
                td #[a(href="http://kenhoff.github.io/frontend-authed-routes") kenhoff.github.io/frontend-authed-routes]
    .slide
        h2 I'm working on Winds!
        p Winds is an RSS reader and podcast player that will showcase activity feeds from Stream.
        img(src="winds-dashboard-preview.png" width="500")
        h3 electron + lots of different views + auth pages
    .slide
        img(src="react-router.png")
        h2 Tonight we're learning about #[code react-router]
        p and how to build "frontend authenticated routes" with it
    .slide
        h2 What you should know for this talk
        ul
            li A little React (props and "composition")
            li 
                p Authentication vs Authorization
                ul 
                    li Authentication: "are you who you say you are?"
                    li Authorization: "are you allowed to see this?"

    .slide.alt
        h2 Building frontend authed routes with #[code react-router]
        ol
            li #[code react-router] theory, example, and practice
            li The case for frontend authenticated routes
            li The #[code Route] component - #[code path], #[code component], and #[code render] props
            li Authed and Unauthed Routes
            li Reusable #[code AuthedRoute] and #[code UnauthedRoute] components
    .slide
        h2 What #[code react-router] does

        p Renders different React components based on window location

        p Change page content with #[strong no refreshes]

        p Quick demo: #[a(href="https://kenhoff.github.io/frontend-authed-routes/") kenhoff.github.io/frontend-authed-routes/]

        p Docs: #[a(href="https://reacttraining.com/react-router/") reacttraining.com/react-router/]

    .slide
        h2 A simple example with #[code react-router]

        :markdown-it
            ```html
            <Router history={createBrowserHistory()}>
                <div>
                    <ul>
                        <li><Link to="/home">Home</Link></li>
                        <li><Link to="/pricing">Pricing</Link></li>
                        <li><Link to="/about">About</Link></li>
                    </ul>
                    <Route path="/home" component={Home}></Route>
                    <Route path="/pricing" component={Pricing}></Route>
                    <Route path="/about" component={About}></Route>
                </div>
            </Router>
            ```

        p Need to bench test? #[code create-react-app] is probably the easiest
    .slide
        h2 #[code react-router] components
        ul
            li #[code Router] 
            //- (parent component, required for passing info down via #[code context])
            li #[code Route] 
            //- (how we describe which components are rendered at which locations)
            li #[code Link] 
            //- (attaches event listeners to #[code <a>] tags to listen for location changes)
            li #[code Redirect]

    //- .slide
    //-     h2 A slightly more complicated example with #[code react-router]
    //- 
    //-     :markdown-it
    //-         ```html
    //-         <Router history={createBrowserHistory()}>
    //-             <div>
    //-                 <ul>
    //-                     <li><Link to="/home">Home</Link></li>
    //-                     <li><Link to="/pricing">Pricing</Link></li>
    //-                     <li><Link to="/about">About</Link></li>
    //-                     <li><Link to="/my-settings">My settings</Link></li>
    //-                     <li><Link to="/sign-in">Sign in</Link></li>
    //-                 </ul>
    //-                 <Route path="/home" component={Home}></Route>
    //-                 <Route path="/pricing" component={Pricing}></Route>
    //-                 <Route path="/about" component={About}></Route>
    //-                 <Route path="/my-settings" component={Settings}></Route>
    //-                 <Route path="/sign-in" component={SignIn}></Route>
    //-             </div>
    //-         </Router>
    //-         ```
    //- 
    //-     //- img(src="https://media.giphy.com/media/3uyIgVxP1qAjS/giphy.gif")

    //- .slide.alt
    //-     h2 Building frontend authed routes with #[code react-router]
    //-     ol
    //-         li.completed #[code react-router] theory, practice and examples
    //-         li The case for frontend authenticated routes
    //-         li The #[code Route] component - #[code component], #[code render], and #[code children] props
    //-         li Authed and Unauthed Routes
    //-         li Reusable #[code AuthedRoute] and #[code UnauthedRoute] components

    .slide
        h2 Frontend authenticated routes? psh, who needs that?
        p Just reload the page!
        p unauthed user → #[code /my-account] → hard redirect to #[code /sign-in]
        p unauthed user → #[code /sign-in] → authenticates → hard redirect to #[code /my-account]
    .slide
        p Frontend authed routes == #[strong No hard redirects when authenticating]
        p nice to have in web apps, but really important with #[strong desktop/native/progressive/electron apps]
        //- br
        //- p #[strong bonus:] 
        //- p 
        //-     em plus, code splitting + the right loaders = snappy and satisfying login UX
    .slide
        h2 Redirects:
        table
            thead
                tr
                    th Users
                    th Source
                    th Destination
            tbody
                tr
                    td 
                        strong All users
                    td
                        code /home
                    td
                        code stay put :)
                tr
                    td 
                        strong All users
                    td
                        code /pricing
                    td
                        code stay put :)
                tr
                    td 
                        strong All users
                    td
                        code /about
                    td
                        code stay put :)
                tr
                    td 
                        strong Unauthed users
                    td
                        code /my-settings
                    td
                        code /sign-in
                tr
                    td 
                        strong Authed users
                    td
                        code /sign-in
                    td
                        code /my-settings
    .slide
        h2 The approach
        p "Authed Route" - only render the component if the user #[strong is] authenticated (otherwise, redirect)
        p "Unauthed Route" - only render the component if the user #[strong is not] authenticated (otherwise, redirect)
        p If we don't care if the user is authed or not, just use plain #[code Route]
    .slide
        h2 Maybe #[code Route] has something built in for this?
        img(src="elmo-thinking.gif")

    //- .slide.alt
    //-     h2 Building frontend authed routes with #[code react-router]
    //-     ol
    //-         li.completed #[code react-router] theory, practice and examples
    //-         li.completed The case for frontend authenticated routes
    //-         li The #[code Route] component - #[code component], #[code render], and #[code children] props
    //-         li Authed and Unauthed Routes
    //-         li Reusable #[code AuthedRoute] and #[code UnauthedRoute] components


    .slide
        h2 The #[code Route] component
        h3 The easy props:
        table
            tr
                td
                    strong #[code path]
                td the URL to match (can include route params, like with #[code express])
            tr
                td 
                    strong #[code component]
                td the component to render if the path matches (can include nested routes!)
            tr
                td #[strong #[code render]] (function)
                td called #[strong if the path matches] (return a React component or element)
            //- tr
            //-     td 
            //-         strong #[code exact]
            //-     td 
            //-         p 
            //-             code path === window.location
            //-         p (for example, #[code /] will match #[code /] #[strong and] #[code /my-settings] #[strong unless] #[code exact] is true)

        :markdown-it
            ```html
            <Route path="/pricing" component={Pricing} />

            <Route path="/about" render={() => {
                return (<About />);
            }} />
            ```
    //- 
    //- .slide
    //-     h2 The #[code Route] component
    //-     h3 The less-easy props:
    //-     table
    //-         tr
    //-             td #[strong #[code component]]
    //-             td the component to render if the path matches
    //-         tr
    //-             td #[strong #[code children]] (function)
    //-             td this function will #[strong always] be called, regardless of if the path matches or not!
    //-     p (don't set more than one of these!)



    //- .slide.alt
    //-     h2 Building frontend authed routes with #[code react-router]
    //-     ol
    //-         li.completed #[code react-router] theory, practice and examples
    //-         li.completed The case for frontend authenticated routes
    //-         li.completed The #[code Route] component - #[code component], #[code render], and #[code children] props
    //-         li Authed and Unauthed Routes
    //-         li Reusable #[code AuthedRoute] and #[code UnauthedRoute] components


    .slide
        h2 An "Authed Route", theory
        ol
            li use the #[code render] prop (only called when path matches)
            li in #[code render], check to see if the user is authenticated or not
            li if user #[strong is] authenticated, render the component
            li if user #[strong is not] authenticated, render a #[code Redirect] to #[code /sign-in]


    .slide
        h2 An "Authed Route", practice

        :markdown-it
            ```html
            <Route path="/my-settings" render={(props) => {
                if (userIsAuthenticated()) {
                    return (<Settings {...props}></Settings>);
                } else {
                    return (<Redirect to="/sign-in"></Redirect>)
                }
                }}></Route>
            ```
        p
            em (why do we have to include #[code ...props] ?)
        p 
            a(href="https://reacttraining.com/react-router/web/api/Route/route-props") reacttraining.com/react-router/web/api/Route/route-props
    .slide
        h2 An "Unauthed Route"
        p (basically the opposite of our "Authed Route")
        :markdown-it
            ```html
            <Route path="/sign-in" render={(props) => {
                if (userIsAuthenticated()) {
                    return (<Redirect to="/my-settings"></Redirect>)
                } else {
                    return (<SignIn {...props}></SignIn>);
                }
                }}></Route>
            ```

    //- .slide.alt
    //-     h2 Building frontend authed routes with #[code react-router]
    //-     ol
    //-         li.completed #[code react-router] theory, practice and examples
    //-         li.completed The case for frontend authenticated routes
    //-         li.completed The #[code Route] component - #[code component], #[code render], and #[code children] props
    //-         li.completed Authed and Unauthed Routes
    //-         li Reusable #[code AuthedRoute] and #[code UnauthedRoute] components

    .slide
        h2 Reuse it!
        p I want a bunch of authed and unauthed routes - 
        ul
            li Authed: 
                code /my-settings
                |, 
                code /my-profile
                |, 
                code /billing
            li Unauthed: 
                code /create-account
                |, 
                code /sign-in
                |, 
                code /forgot-password
                |, 
                code /reset-password
            li Don't care: 
                code /home
                |, 
                code /pricing
                |, 
                code /about
        p Want something #[strong reusable] and #[strong easy-to-read]
        p Something like "#[code AuthedRoute]" and "#[code UnauthedRoute]"
        p Still want to use #[code Route] for routes that we don't care about auth on
    .slide
        h2 Our #[code AuthedRoute] component
        p putting it all together....
        ol
            li new #[code AuthedRoute] component
            li #[code AuthedRoute] renders a #[code Route]
            li that #[Route] uses the #[code render] prop (only called when path matches)
            li check to see if the user is authenticated or not
            li if the user #[strong is] authenticated, render the #[strong #[code component]] (passed in as props)
            li if the user #[strong is not] authenticated, render a #[code Redirect] to #[code /sign-in]
        p composition yay!
    .slide
        h2 Our #[code AuthedRoute] component
        :markdown-it
            ```jsx
                let AuthedRoute = ({
                    component: Component,
                    ...rest
                }) => {
                    return <Route {...rest} render={(props) => {
                        if (userIsAuthenticated()) {
                            return (<Component {...props}></Component>);
                        } else {
                            return (<Redirect to="/sign-in"></Redirect>)
                        }
                        }}></Route>
                }

                <AuthedRoute path="/my-settings" component={Settings}></AuthedRoute>
            ```

    .slide
        h2 Our #[code UnauthedRoute] component
        p ....is basically the opposite of the #[code AuthedRoute] component
        :markdown-it
            ```jsx
                let UnauthedRoute = ({
                    component: Component,
                    ...rest
                }) => {
                    return <Route {...rest} render={(props) => {
                        if (userIsAuthenticated()) {
                            return (<Redirect to="/my-settings"></Redirect>)
                        } else {
                            return (<Component {...props}></Component>);
                        }
                        }}></Route>
                }

                <UnauthedRoute path="/sign-in" component={SignIn}></UnauthedRoute>
            ```
    .slide
        h2 The finished #[code Router]
        :markdown-it
            ```html
            <Router history={createBrowserHistory()}>
                <div>
                    <ul>
                        <li><Link to="/home">Home</Link></li>
                        <li><Link to="/pricing">Pricing</Link></li>
                        <li><Link to="/about">About</Link></li>
                        <li><Link to="/my-settings">My settings (authed)</Link></li>
                        <li><Link to="/sign-in">Sign in (unauthed)</Link></li>
                    </ul>
                    <Route path="/home" component={Home}></Route>
                    <Route path="/pricing" component={Pricing}></Route>
                    <Route path="/about" component={About}></Route>
                    <AuthedRoute path="/my-settings" component={Settings}></AuthedRoute>
                    <UnauthedRoute path="/sign-in" component={SignIn}></UnauthedRoute>
                </div>
            </Router>
            ```
    .slide
        h2 Exercises for the reader
        ul
            li #[strong Nested routes] - #[code /my-inbox] vs #[code /my-inbox/message1234]
            li #[strong Authorization] - is this user allowed to see this?
            li #[strong Deep linking] - redirecting the user to the desired URL #[strong after] they authenticate
            li #[strong Public/marketing site] - don't serve your main app assets to every visitor on the main site (but then what happens when authed users go to your main site?)
    .slide.alt
        h1 Thanks so much!
        img(src="elmo-wave.gif" width="200")
        p
            a(href="https://twitter.com/ken_hoff") #[i.fa.fa-twitter] ken_hoff
