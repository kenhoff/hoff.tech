extends ../../layouts/slides/stream

block head
    title Let's do the Wave(form)
    link(rel="stylesheet" href="waveform.css")

block slides
    .slide.alt
        h1 Let's do the Wave(form)
        img(src="waves.gif" width="100")
    .slide
        h2 Hi! I'm Ken.
        p I'm a full-stack product engineer.
        p I build #[a(href="https://ken.hoff.tech") dumb fun web stuff] and #[a(href="http://www.rustbucketgarage.tv") work on rusty old cars].
    .slide.alt
        h2 I'm currently a Developer Advocate at #[a(href="https://getstream.io") Stream]! 
        p Stream lets you build #[strong scalable] and #[strong personalized] activity feeds.
    .slide
        h2 I'm working on Winds!
        p Winds is an RSS reader and podcast player that will showcase activity feeds from Stream.
        img(src="winds-dashboard-preview.png" width="500")
    .slide
        p I needed to build a "waveform" for Winds:
        img(src="waveform-mock.png")
    .slide
        p We're going to build that waveform!
        img(src="waveform.gif")
    .slide
        p If you'd like to revisit this later:
        table
            tr
                td Slides: 
                td #[a(href="https://ken.hoff.tech/slides/waveform") ken.hoff.tech/slides/waveform]
            tr
                td Source code: 
                td #[a(href="https://github.com/kenhoff/winds-waveform-example") github.com/kenhoff/winds-waveform-example]
            tr
                td Live demo:
                td #[a(href="http://kenhoff.github.io/winds-waveform-example") kenhoff.github.io/winds-waveform-example]
    .slide.alt
        h2 How to build a front end waveform from start to finish:
        ol
            li project setup
            li get audio data
            li convert audio data into "buckets"
            li render out our waveform "bars"
            li connect everything together with CSS
            li connect it to your audio player

    .slide
        :markdown-it
            ## Step 1: Get your project folder set up

            ```html
            <html>
                <head>
                    <!-- axios is a library for XMLHttpRequest -->
                    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
                </head>
                <body>
                    <h1>Winds Waveform Example</h1>
                </body>
            </html>
            ```

            Also, your audio file:

        code #[a(href="https://kenhoff.github.io/winds-waveform-example/bluegrass.mp3") bluegrass.mp3]
    .slide
        h3 Also - 
        p You'll need to serve your page via #[code http://], not #[code file://]
        :markdown-it
            ```
            yarn global add http-server
            http-server -p 1234
            ```
            
            _(browsers won't let you request resources via `http://` if you're on a `file://` page)_
    .slide.alt
        ol
            li.completed project setup
            li get audio data
            li convert audio data into "buckets"
            li render out our waveform "bars"
            li connect everything together with CSS
            li connect it to your audio player
    .slide
        :markdown-it
            ## Step 2: Retrieve that audio data

            Throw a `<script>` tag at the bottom of the `<body>`.

            Use `axios` (or XHR, or `fetch`, or whatever!) to get your audio data as an `ArrayBuffer`.

            ```js
                axios({url: "bluegrass.mp3", responseType: "arraybuffer"})
                    .then(response => {
                        let audioData = response.data;
                        console.log(audioData);
                    }).catch(err => {
                        // catch any errors with fetching the audio
                        console.log(err);
                    });
            ```
    .slide.alt
        ol
            li.completed project setup
            li.completed get audio data
            li convert audio data into "buckets"
            li render out our waveform "bars"
            li connect everything together with CSS
            li connect it to your audio player
    .slide
        h2 Step 3, Part 1: convert the audio data into "samples"
        p A "sample" is a single data point on an audio track
        p Played back fast enough, they sound like a podcast!
        :markdown-it
            ```js
            let audioCtx = new(window.AudioContext || window.webkitAudioContext)();

            audioCtx.decodeAudioData(audioData, buffer => {
                decodedAudioData = buffer.getChannelData(0);
                console.log(decodedAudioData);
            }, e => {
                // callback for any errors with decoding audio data
                console.log('Error with decoding audio data' + e.err);
            });
            ```
    .slide
        h2 Step 3, Part 2: convert the samples into "buckets"
        ol
            li Take the first #[code N] samples
            li Find the maximum value, store that in an array
            li Take the next #[code N] samples
            li Find the maximum value, append that to the array
            li #[code GOTO 3]
    .slide
        h2 Step 3, Part 2: convert the samples into "buckets"
        :markdown-it
            ```js
            const NUMBER_OF_BUCKETS = 100; // number of "bars" the waveform should have

            let bucketDataSize = Math.floor(decodedAudioData.length / NUMBER_OF_BUCKETS);
            let buckets = [];
            for (var i = 0; i < NUMBER_OF_BUCKETS; i++) {
                let startingPoint = i * bucketDataSize;
                let endingPoint = i * bucketDataSize + bucketDataSize;
                let max = 0;
                for (var j = startingPoint; j < endingPoint; j++) {
                    if (decodedAudioData[j] > max) {
                        max = decodedAudioData[j];
                    }
                }
                let size = Math.abs(max);
                buckets.push(size / 2);
            }
            ```
    .slide.alt
        ol
            li.completed project setup
            li.completed get audio data
            li.completed convert audio data into "buckets"
            li render out our waveform "bars"
            li connect everything together with CSS
            li connect it to your audio player
    .slide
        h2 Step 4: create our waveform "bars"
        p We've got our "buckets". How do we turn that into a waveform?
        img(src="elmo-thinking.gif")
        p With #[strong SVG]!
    .slide 
        h2 Creating an SVG waveform
        :markdown-it
            ```html
            <!-- not the final version! -->
            <svg id="waveform-mask"></svg>
            ```

            Use JavaScript to generate the "bars" from our "buckets":

            ```js
            const SPACE_BETWEEN_BARS = 0.2; // from 0 (no gaps between bars) to 1 (only gaps - bars won't be visible)

            document.getElementById('waveform-mask').innerHTML = buckets.map((bucket, i) => {
                let bucketSVGWidth = 100.0 / buckets.length;
                let bucketSVGHeight = bucket * 100.0;
                return `
                    <rect
                        x=${bucketSVGWidth * i + SPACE_BETWEEN_BARS / 2.0}
                        y=${ (100 - bucketSVGHeight) / 2.0}
                        width=${bucketSVGWidth - SPACE_BETWEEN_BARS}
                        height=${bucketSVGHeight} 
                    />`;
            }).join('');
            ```
    .slide
        :markdown-it
            - Yes, we _could_ do this with the DOM and `<div>`s
            - But, we want the progress bar to "shine through" the waveform bars
        img(src="waveform-mock.png")
    .slide
        h3 Masking #[em (or, clipping)]
        .masking-example
            img(src="svg-mask-example.png" width="300")
            span +
            img(src="svg-mask-example-3.png" width="100")
            span = 
            img(src="svg-mask-example-4.png" width="100")
        p "Only display through this SVG element".
        p
            a(href="https://codepen.io/yoksel/full/fsdbu") Here's a bunch more examples.
        img(src="mask.gif" width="200")
    .slide
        h2 Step 4, Part 1: create our progress bar SVGs
        ul
            li A "progress bar" SVG
            li A "background" SVG
        :markdown-it
            ```html
            <!-- this SVG is the "background" and progress bar -->
            <svg viewBox="0 0 100 100" class="waveform-container" preserveAspectRatio="none">
                <rect 
                    class="waveform-bg"
                    x="0" y="0" 
                    height="100" width="100"
                />
                <rect 
                    id="waveform-progress" 
                    class="waveform-progress" 
                    x="0" y="0" 
                    height="100" width="40"
                />
            </svg>
    .slide
        h2 Step 4, Part 2: #[code clipPath] SVG, and add the waveform bars
        :markdown-it
            ```html
            <!-- this SVG is the "clipping mask" - the waveform bars -->
            <svg height="0" width="0">
                <defs>
                    <clipPath id="waveform-mask"></clipPath>
                </defs>
            </svg>
            ```
            
        ul
            li Doesn't get displayed directly (height and width of 0)
            li But, we'll connect it later with CSS
                    
    .slide.alt
        ol
            li.completed project setup
            li.completed get audio data
            li.completed convert audio data into "buckets"
            li.completed render out our waveform "bars"
            li connect everything together with CSS
            li connect it to your audio player
    .slide
        h2 Step 5: connect your SVGs with CSS
        :markdown-it
            ```css
            .waveform-bg {
                clip-path: url("#waveform-mask");
                fill: lightgray;
            }
            .waveform-progress {
                clip-path: url("#waveform-mask");
                fill: #44bc75;
            }
            ```
            
            `clip-path` tells the element **"only display _through_ this SVG pattern"**.
        
    .slide.alt
        ol
            li.completed project setup
            li.completed get audio data
            li.completed convert audio data into "buckets"
            li.completed render out our waveform "bars"
            li.completed connect everything together with CSS
            li connect it to your audio player
    .slide
        :markdown-it
            ## Step 6: `<audio>` element, connect it to the waveform
            
            ```html
            <!-- our audio element -->
            <audio id="audio-element" src="bluegrass.mp3" controls="controls"></audio>
            ```
            ```javascript
            let audioElement = document.getElementById('audio-element');
            let waveformProgress = document.getElementById('waveform-progress');

            // every 100 milliseconds, update the waveform-progress SVG with a new width 
            // (the percentage of time elapsed on the audio file)
            setInterval(() => {
                let percentComplete = audioElement.currentTime / audioElement.duration * 100;
                waveformProgress.setAttribute('width', percentComplete);
            }, 100);
            ```
    .slide.alt
        ol
            li.completed project setup
            li.completed get audio data
            li.completed convert audio data into "buckets"
            li.completed render out our waveform "bars"
            li.completed connect everything together with CSS
            li.completed connect it to your audio player
    .slide
        h2 Step 7: Yay it works!
        img(src="elmo-dancing.gif")
        p
            a(href="https://kenhoff.github.io/winds-waveform-example") Live Demo
    .slide
        h2 What's next?
        ul
            li Just one network call for audio
            li "Maximum loudness" isn't very useful
            li Still some incompatible styling
    .slide.alt
        h1 Thanks so much!
        img(src="elmo-wave.gif" width="200")
        p
            a(href="https://twitter.com/ken_hoff") #[i.fa.fa-twitter] ken_hoff
